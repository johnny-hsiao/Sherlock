{
  "_args": [
    [
      "watson-developer-cloud",
      "/Users/Shark/Desktop/lighthouse/final-proj-sandbox/scraper"
    ]
  ],
  "_from": "watson-developer-cloud@*",
  "_id": "watson-developer-cloud@1.4.1",
  "_inCache": true,
  "_location": "/watson-developer-cloud",
  "_nodeVersion": "4.4.3",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/watson-developer-cloud-1.4.1.tgz_1460698002842_0.050611807499080896"
  },
  "_npmUser": {
    "email": "nathan@nfriedly.com",
    "name": "nfriedly"
  },
  "_npmVersion": "2.15.1",
  "_phantomChildren": {
    "aws-sign2": "0.6.0",
    "aws4": "1.3.2",
    "caseless": "0.11.0",
    "combined-stream": "1.0.5",
    "core-util-is": "1.0.2",
    "extend": "3.0.0",
    "forever-agent": "0.6.1",
    "form-data": "1.0.0-rc4",
    "har-validator": "2.0.6",
    "hawk": "3.1.3",
    "http-signature": "1.1.1",
    "inherits": "2.0.1",
    "is-typedarray": "1.0.0",
    "isstream": "0.1.2",
    "json-stringify-safe": "5.0.1",
    "mime-types": "2.1.10",
    "node-uuid": "1.4.7",
    "oauth-sign": "0.8.1",
    "process-nextick-args": "1.0.6",
    "string_decoder": "0.10.31",
    "stringstream": "0.0.5",
    "tough-cookie": "2.2.2",
    "tunnel-agent": "0.4.2",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "name": "watson-developer-cloud",
    "raw": "watson-developer-cloud",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/watson-developer-cloud/-/watson-developer-cloud-1.4.1.tgz",
  "_shasum": "bb092feb673f0e5d5ebfa37d2f0d17017cc195fd",
  "_shrinkwrap": null,
  "_spec": "watson-developer-cloud",
  "_where": "/Users/Shark/Desktop/lighthouse/final-proj-sandbox/scraper",
  "author": {
    "name": "IBM Corp."
  },
  "bugs": {
    "url": "https://github.com/watson-developer-cloud/node-sdk/issues"
  },
  "contributors": [
    {
      "email": "germanatt@us.ibm.com",
      "name": "German Attanasio Ruiz"
    },
    {
      "email": "nfriedly@us.ibm.com",
      "name": "Nathan Friedly"
    },
    {
      "email": "jsstylos@us.ibm.com",
      "name": "Jeff Stylos"
    }
  ],
  "dependencies": {
    "cookie": "~0.2.3",
    "csv-stringify": "~1.0.2",
    "extend": "~3.0.0",
    "isstream": "~0.1.2",
    "object.omit": "~2.0.0",
    "object.pick": "~1.1.1",
    "request": "~2.69.0",
    "solr-client": "~0.6.0",
    "string": "3.3.1",
    "vcap_services": "~0.1.7",
    "websocket": "~1.0.22"
  },
  "description": "Client library to use the IBM Watson Services and AlchemyAPI",
  "devDependencies": {
    "codecov": ">1.0.0",
    "concat-stream": "^1.5.1",
    "eslint": "^2.2.0",
    "istanbul": "^0.4.2",
    "jsdoc": "^3.4.0",
    "mocha": "^2.4.5",
    "mocha-retry": "^0.1.0",
    "nock": "^7.5.0",
    "qs": "^6.1.0",
    "wav": "^1.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "bb092feb673f0e5d5ebfa37d2f0d17017cc195fd",
    "tarball": "https://registry.npmjs.org/watson-developer-cloud/-/watson-developer-cloud-1.4.1.tgz"
  },
  "engines": {
    "node": ">=0.12"
  },
  "gitHead": "34151f135b58abf972c74e1b4475c26889538599",
  "homepage": "https://github.com/watson-developer-cloud/node-sdk#readme",
  "installable": true,
  "keywords": [
    "alchemy",
    "alchemy datanews ",
    "alchemy language",
    "alchemy vision",
    "alchemyapi",
    "concept expansion",
    "concept insights",
    "dialog",
    "dialog",
    "ibm",
    "language identification",
    "language translation",
    "machine translation",
    "message resonance",
    "natural language classifier",
    "personality insights",
    "question and answer",
    "relationship extraction",
    "retrieve and rank",
    "speech to text",
    "text to speech",
    "tone analyzer",
    "tone_analyzer",
    "tradeoff analytics",
    "user modeling",
    "visual recognition ",
    "watson",
    "watson developer cloud",
    "wdc"
  ],
  "license": "Apache-2.0",
  "main": "./lib/index",
  "maintainers": [
    {
      "email": "germanattanasio@gmail.com",
      "name": "germanattanasio"
    },
    {
      "email": "nathan@nfriedly.com",
      "name": "nfriedly"
    }
  ],
  "name": "watson-developer-cloud",
  "optionalDependencies": {},
  "readme": "Watson Developer Cloud Node.js SDK\n============================================\n[![Codacy Badge](https://www.codacy.com/project/badge/9d457db455d846649457bb97b6dea290)](https://www.codacy.com/app/germanattanasio/node-sdk)\n[![Build Status](https://secure.travis-ci.org/watson-developer-cloud/node-sdk.svg)](http://travis-ci.org/watson-developer-cloud/node-sdk)\n[![Dependency Status](https://gemnasium.com/watson-developer-cloud/node-sdk.svg)](https://gemnasium.com/watson-developer-cloud/node-sdk)\n[![codecov.io](https://codecov.io/github/watson-developer-cloud/node-sdk/coverage.svg?branch=master)](https://codecov.io/github/watson-developer-cloud/node-sdk?branch=master)\n[![npm-version](https://img.shields.io/npm/v/watson-developer-cloud.svg)](https://www.npmjs.com/package/watson-developer-cloud)\n[![npm-downloads](https://img.shields.io/npm/dm/watson-developer-cloud.svg)](https://www.npmjs.com/package/watson-developer-cloud)\n\nNode client library to use the [Watson Developer Cloud][wdc] services, a collection of REST\nAPIs and SDKs that use cognitive computing to solve complex problems.\n\n## Table of Contents\n  * [Breaking Changes for v1.0](#breaking-changes-for-v10)\n  * [Installation](#installation)\n  * [Usage](#usage)\n  * [Getting the Service Credentials](#getting-the-service-credentials)\n  * [Questions](#questions)\n  * [Examples](#examples)\n  * [IBM Watson Services](#ibm-watson-services)\n    * [Alchemy Language](#alchemy-language)\n    * [Alchemy Vision](#alchemy-vision)\n    * [Alchemy Data News](#alchemy-data-news)\n    * [Authorization](#authorization)\n    * [Concept Expansion](#concept-expansion)\n    * [Concept Insights](#concept-insights)\n    * [Dialog](#dialog)\n    * [Document Conversion](#document-conversion)\n    * [Language Translation](#language-translation)\n    * [Natural Language Classifier](#natural-language-classifier)\n    * [Personality Insights](#personality-insights)\n    * [Relationship Extraction](#relationship-extraction)\n    * [Retrieve and Rank](#retrieve-and-rank)\n    * [Speech to Text](#speech-to-text)\n    * [Text to Speech](#text-to-speech)\n    * [Tone Analyzer](#tone-analyzer)\n    * [Tradeoff Analytics](#tradeoff-analytics)\n    * [Visual Insights](#visual-insights)\n    * [Visual Recognition](#visual-recognition)\n  * [Running in Bluemix](#running-in-bluemix)\n  * [Debug](#debug)\n  * [Tests](#tests)\n  * [Open Source @ IBM](#open-source--ibm)\n  * [License](#license)\n  * [Contributing](#contributing)\n\n## Breaking Changes for v1.0\n\nSeveral breaking changes were introduced with the v1.0.0 release:\n\n  * Experimental and Beta services now require the appropriate tag to be added to their version:\n    * Concept Expansion `v1` is now `v1-beta`\n    * Question and Answer `v1` is now `v1-beta`\n    * Relationship Extraction `v1` is now `v1-beta`\n    * Tone Analyzer `v2` is now `v2-experimental`\n    * Visual Insights `v1` is now `v1-experimental`\n    * Visual Recognition `v1` is now `v1-beta`\n  * Speech to Text gained a new `createRecognizeStream()` method replacing the existing live streaming methods with a simpler Read/Write stream.\n    The older methods are still available in v1.0 but each log a deprecation warning (unless `{silent: true}` is passed in) and will be removed from a future release.\n    The affected methods are:\n    * `recognizeLive()`\n    * `observeResult()`\n    * `getRecognizeStatus()`\n  * The Document Conversion API has been reduced to a single `convert()` method; it no longer offers batch conversion or cloud storage of files.\n  * Several deprecated services have been removed:\n    * Message Resonance\n    * Tone Analyzer v1 (replaced by v2-experimental)\n    * Search (replaced by Retrieve and Rank)\n  * Dropped support for node.js v0.10.x (For reference: the WDC Node.js SDK now officially support the latest 0.12, LTS, and Stable releases of Node.js.)\n\n\n## Installation\n\n```sh\n$ npm install watson-developer-cloud --save\n```\n\n## Usage\n\nThe examples below assume that you already have service credentials. If not,\nyou will have to create a service in [Bluemix][bluemix].\n\nIf you are running your application in Bluemix, you don't need to specify the\ncredentials; the library will get them for you by looking at the `VCAP_SERVICES` environment variable.\n\n## Getting the Service Credentials\nYou will need the `username` and `password` (`api_key` for AlchemyAPI) credentials for each service. Service credentials are different from your Bluemix account username and password.\n\nTo get your service credentials, follow these steps:\n 1. Log in to Bluemix at https://bluemix.net.\n\n 1. Create an instance of the service:\n     1. In the Bluemix **Catalog**, select the service you want to use.\n     1. Under **Add Service**, type a unique name for the service instance in the Service name field. For example, type `my-service-name`. Leave the default values for the other options.\n     1. Click **Create**.\n\n 1. Copy your credentials:\n     1. On the left side of the page, click **Service Credentials** to view your service credentials.\n     1. Copy `username` and `password`(`api_key` for AlchemyAPI).\n\n## Questions\n\nIf you are having difficulties using the APIs or have a question about the IBM\nWatson Services, please ask a question on\n[dW Answers](https://developer.ibm.com/answers/questions/ask/?topics=watson)\nor [Stack Overflow](http://stackoverflow.com/questions/ask?tags=ibm-watson).\n\n## Examples\nThe [examples][examples] folder has basic and advanced examples.\n\n## IBM Watson Services\nThe Watson Developer Cloud offers a variety of services for building cognitive\napps.\n\n### Alchemy Language\n[Alchemy Language][alchemy_language] offers 12 API functions as part of its text analysis service, each of which uses sophisticated natural language processing techniques to analyze your content and add high-level semantic information.\n\nUse the [Sentiment Analysis][sentiment_analysis] endpoint to identify positive/negative sentiment within a sample text document.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar alchemy_language = watson.alchemy_language({\n  api_key: '<api_key>'\n});\n\nvar params = {\n  text: 'IBM Watson won the Jeopardy television show hosted by Alex Trebek'\n};\n\nalchemy_language.sentiment(params, function (err, response) {\n  if (err)\n    console.log('error:', err);\n  else\n    console.log(JSON.stringify(response, null, 2));\n});\n```\n\n### Alchemy Vision\n[Alchemy Vision][alchemy_vision] uses deep learning innovations to understand a picture's content and context. It sees complex visual scenes in their entirety —without needing any textual clues— leveraging a holistic approach to understanding the multiple objects and surroundings.\n\nExample: Extract keywords from an image.\n\n```javascript\nvar watson = require('watson-developer-cloud');\nvar fs = require('fs');\n\nvar alchemy_vision = watson.alchemy_vision({\n  api_key: '<api_key>'\n});\n\nvar params = {\n  image: fs.createReadStream('src/test/resources/obama.jpg')\n};\n\nalchemy_vision.getImageKeywords(params, function (err, keywords) {\n  if (err)\n    console.log('error:', err);\n  else\n    console.log(JSON.stringify(keywords, null, 2));\n});\n```\n\n### Alchemy Data News\n[Alchemy Data News][alchemy_data_news] indexes 250k to 300k English language news and blog articles every day with historical search available for the past 60 days.\nExample: Get the volume data from the last 7 days using 12hs of time slice.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar alchemy_data_news = watson.alchemy_data_news({\n  api_key: '<api_key>'\n});\n\nvar params = {\n  start: 'now-1d',\n  end: 'now'\n};\n\nalchemy_data_news.getNews(params, function (err, news) {\n  if (err)\n    console.log('error:', err);\n  else\n    console.log(JSON.stringify(news, null, 2));\n});\n```\n\n### Authorization\nThe Authorization service can generates tokens, this are useful when it's too cumbersome to provide a username/password pair.\nTokens are valid for 1 hour and need to be send using the `X-Watson-Authorization-Token` header.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar authorization = watson.authorization({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nvar params = {\n  // URL of the resource you wish to access\n  url: 'https://stream.watsonplatform.net/text-to-speech/api'\n};\n\nauthorization.getToken(params, function (err, token) {\n  if (!token) {\n    console.log('error:', err);\n  } else {\n    // Use your token here\n  }\n});\n```\n\n### Concept Expansion\nThe Watson [Concept Expansion][concept_expansion] Service will be withdrawn. The Watson Concept Expansion Service tile will be removed from the Bluemix catalog on Sunday, March 6, 2016, after which you cannot provision new instances of this service. However, existing provisioned instances will continue to be usable until March 30, 2016.\n\n### Concept Insights\nUse the [Concept Insights][concept_insights] service to identify words in the\ntext that correspond to concepts in a Wikipedia graph.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar concept_insights = watson.concept_insights({\n  username: '<username>',\n  password: '<password>',\n  version: 'v2'\n});\n\nvar params = {\n  graph: '/graphs/wikipedia/en-20120601',\n  text: 'IBM Watson won the Jeopardy television show hosted by Alex Trebek'\n};\n\n// Retrieve the concepts for input text\nconcept_insights.graphs.annotateText(params, function(err, res) {\n  if (err)\n    console.log(err);\n  else {\n    console.log(JSON.stringify(res, null, 2));\n  }\n});\n```\n\n### Dialog\nUse the Dialog service to list all the dialogs you have.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar dialog = watson.dialog({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\ndialog.getDialogs({}, function (err, dialogs) {\n  if (err)\n    console.log('error:', err);\n  else\n    console.log(JSON.stringify(dialogs, null, 2));\n});\n```\n\n### Document Conversion\n\n```javascript\nvar watson = require('watson-developer-cloud');\nvar fs = require('fs');\n\nvar document_conversion = watson.document_conversion({\n  username:     '<username>',\n  password:     '<password>',\n  version:      'v1',\n  version_date: '2015-12-01'\n});\n\n// convert a single document\ndocument_conversion.convert({\n  // (JSON) ANSWER_UNITS, NORMALIZED_HTML, or NORMALIZED_TEXT\n  file: fs.createReadStream('sample-docx.docx'),\n  conversion_target: document_conversion.conversion_target.ANSWER_UNITS,\n  // Add custom configuration properties or omit for defaults\n  word: {\n    heading: {\n      fonts: [\n        { level: 1, min_size: 24 },\n        { level: 2, min_size: 16, max_size: 24 }\n      ]\n    }\n  }\n}, function (err, response) {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(JSON.stringify(response, null, 2));\n  }\n});\n```\n\nSee the [Document Conversion integration example][document_conversion_integration_example] about how to integrate the Document Conversion service\nwith the Retrieve and Rank service.\n\n### Language Translation\n\nTranslate text from one language to another or idenfity a language using the [Language Translation][language_translation] service.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar language_translation = watson.language_translation({\n  username: '<username>',\n  password: '<password>',\n  version: 'v2'\n});\n\nlanguage_translation.translate({\n  text: 'A sentence must have a verb', source : 'en', target: 'es', model_id: '<model-id>' },\n  function (err, translation) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(translation, null, 2));\n});\n\nlanguage_translation.identify({\n  text: 'The language translation service takes text input and identifies the language used.' },\n  function (err, language) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(language, null, 2));\n});\n```\n\n### Natural Language Classifier\n\nUse [Natural Language Classifier](http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/nl-classifier/) service to create a classifier instance by providing a set of representative strings and a set of one or more correct classes for each as training. Then use the trained classifier to classify your new question for best matching answers or to retrieve next actions for your application.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar natural_language_classifier = watson.natural_language_classifier({\n  url: 'https://gateway.watsonplatform.net/natural-language-classifier/api',\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nnatural_language_classifier.classify({\n  text: 'Is it sunny?',\n  classifier_id: '<classifier-id>' },\n  function(err, response) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(response, null, 2));\n});\n```\n\nSee this [example](https://github.com/watson-developer-cloud/node-sdk/blob/master/examples/natural_language_classifier.v1.js) to learn how to create a classifier.\n\n### Personality Insights\nAnalyze text in english and get a personality profile by using the\n[Personality Insights][personality_insights] service.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar personality_insights = watson.personality_insights({\n  username: '<username>',\n  password: '<password>',\n  version: 'v2'\n});\n\npersonality_insights.profile({\n  text: 'Enter more than 100 unique words here...',\n  language: 'en' },\n  function (err, response) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(response, null, 2));\n});\n```\n\n**Note:** Don't forget to update the `text` variable!\n\n\n### Relationship Extraction\nAnalyze an English news article and get the relationships between sentence\ncomponents (nouns, verbs, subjects, objects, etc.) by using the\n[Relationship Extraction][relationship_extraction] service.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar relationship_extraction = watson.relationship_extraction({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1-beta'\n});\n\nrelationship_extraction.extract({\n  text: 'IBM Watson developer cloud',\n  dataset: 'ie-en-news' },\n  function (err, response) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(response, null, 2));\n});\n```\n\n### Retrieve and Rank\nUse the [Retrieve and Rank][retrieve_and_rank] service to enhance search results with machine learning.\n\n```javascript\nvar retrieve = watson.retrieve_and_rank({\n  username: 'INSERT YOUR USERNAME FOR THE SERVICE HERE',\n  password: 'INSERT YOUR PASSWORD FOR THE SERVICE HERE',\n  version: 'v1',\n  url: 'https://gateway.watsonplatform.net/retrieve-and-rank/api'\n});\n\nvar solrClient = retrieve.createSolrClient({\n  cluster_id: 'INSERT YOUR CLUSTER ID HERE',\n  collection_name: 'example_collection'\n});\n\n// add a document\nvar doc = { id : 1234, title_t : 'Hello', text_field_s: 'some text' };\nsolrClient.add(doc, function(err) {\n  if(err) {\n    console.log('Error indexing document: ' + err);\n  } else {\n    console.log('Indexed a document.');\n    solrClient.commit(function(err) {\n      if(err) {\n        console.log('Error committing change: ' + err);\n      } else {\n        console.log('Successfully commited changes.');\n      }\n    });\n  }\n});\n\n// search all documents\nvar query = solrClient.createQuery();\nquery.q({ '*' : '*' });\nsolrClient.search(query, function(err, searchResponse) {\n  if(err) {\n    console.log('Error searching for documents: ' + err);\n  } else {\n    console.log('Found ' + searchResponse.response.numFound + ' document(s).');\n    console.log('First document: ' + JSON.stringify(searchResponse.response.docs[0], null, 2));\n  }\n});\n```\n\n### Speech to Text\nUse the [Speech to Text][speech_to_text] service to recognize the text from a\n.wav file.\n\n```javascript\nvar watson = require('watson-developer-cloud');\nvar fs = require('fs');\n\nvar speech_to_text = watson.speech_to_text({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nvar params = {\n  // From file\n  audio: fs.createReadStream('./resources/speech.wav'),\n  content_type: 'audio/l16; rate=44100'\n};\n\nspeech_to_text.recognize(params, function(err, res) {\n  if (err)\n    console.log(err);\n  else\n    console.log(JSON.stringify(res, null, 2));\n});\n\n// or streaming\nfs.createReadStream('./resources/speech.wav')\n  .pipe(speech_to_text.createRecognizeStream({ content_type: 'audio/l16; rate=44100' }))\n  .pipe(fs.createWriteStream('./transcription.txt'));\n```\n\n### Text to Speech\nUse the [Text to Speech][text_to_speech] service to synthesize text into a\n.wav file.\n\n```js\nvar watson = require('watson-developer-cloud');\nvar fs = require('fs');\n\nvar text_to_speech = watson.text_to_speech({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nvar params = {\n  text: 'Hello from IBM Watson',\n  voice: 'en-US_AllisonVoice', // Optional voice\n  accept: 'audio/wav'\n};\n\n// Pipe the synthesized text to a file\ntext_to_speech.synthesize(params).pipe(fs.createWriteStream('output.wav'));\n```\n\n### Tone Analyzer\nUse the [Tone Analyzer][tone_analyzer] service to analyze the\nemotion, writing and social tones of a text.\n\n```js\nvar watson = require('watson-developer-cloud');\n\nvar tone_analyzer = watson.tone_analyzer({\n  username: '<username>',\n  password: '<password>',\n  version: 'v3-beta',\n  version_date: '2016-02-11'\n});\n\ntone_analyzer.tone({ text: 'Greetings from Watson Developer Cloud!' },\n  function(err, tone) {\n    if (err)\n      console.log(err);\n    else\n      console.log(JSON.stringify(tone, null, 2));\n});\n```\n\n\n### Tradeoff Analytics\nUse the [Tradeoff Analytics][tradeoff_analytics] service to find the best\nphone that minimizes price and weight and maximizes screen size.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar tradeoff_analytics = watson.tradeoff_analytics({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\n// From file\nvar params = require('./resources/problem.json');\n\ntradeoff_analytics.dilemmas(params, function(err, res) {\n  if (err)\n    console.log(err);\n  else\n    console.log(JSON.stringify(res, null, 2));\n});\n```\n\n### Visual Insights\nUse the [Visual Insights][visual_insights] to get insight into the themes present in a collection of images based on their visual appearance/content.\n\n```js\nvar watson = require('watson-developer-cloud');\nvar fs = require('fs');\n\nvar visual_insights = watson.visual_insights({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1-experimental'\n});\n\nvar params = {\n  images_file: fs.createReadStream('./resources/images.zip')\n};\n\nvisual_insights.summary(params, function(err, res) {\n  if (err)\n    console.log(err);\n  else\n    console.log(JSON.stringify(res, null, 2));\n});\n```\n\n### Visual Recognition\nUse the [Visual Recognition][visual_recognition] service to recognize the\nfollowing picture.\n\n<img src=\"https://visual-recognition-demo.mybluemix.net/images/samples/5.jpg\" width=\"150\" />\n\n```js\nvar watson = require('watson-developer-cloud');\nvar fs = require('fs');\n\nvar visual_recognition = watson.visual_recognition({\n  username: '<username>',\n  password: '<password>',\n  version: 'v2-beta',\n  version_date: '2015-12-02'\n});\n\nvar params = {\n  images_file: fs.createReadStream('./resources/car.png')\n};\n\nvisual_recognition.classify(params, function(err, res) {\n  if (err)\n    console.log(err);\n  else\n    console.log(JSON.stringify(res, null, 2));\n});\n```\n\n## Running in Bluemix\nBy default, the library tries to use the Bluemix `VCAP_SERVICES` environment\nvariable to get the credentials for a given service. You can avoid this by\nusing:\n`use_vcap_services`.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar concept_expansion = watson.concept_expansion({\n  version: 'v1-beta',\n  use_vcap_services: false\n});\n```\nThis example fails because you did not provide a username and password and\nthe library will not look into Bluemix for these values.\n\n## Unauthenticated requests\nBy default, the library tries to use Basic Auth and will ask for `api_key` or `username` and `password` and send an `Authorization: Basic XXXXXXX`. You can avoid this by using:\n\n`use_unauthenticated`.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar dialog = watson.dialog({\n  version: 'v1',\n  use_unauthenticated: true\n});\n```\n\n## Debug\nThis library relies on the `request` npm module writted by\n[request][request_github] to call the Watson Services. To debug the apps, add\n'request' to the `NODE_DEBUG` environment variable:\n\n```sh\n$ NODE_DEBUG='request' node app.js\n```\nwhere `app.js` is your Node.js file.\n\n## Tests\nRunning all the tests:\n```sh\n$ npm test\n```\n\nRunning a specific test:\n```sh\n$ mocha -g '<test name>'\n```\n\n## Open Source @ IBM\n[Find more open source projects on the IBM Github Page.](http://ibm.github.io/)\n\n## License\n\nThis library is licensed under Apache 2.0. Full license text is available in\n[COPYING][license].\n\n## Contributing\nSee [CONTRIBUTING](https://github.com/watson-developer-cloud/node-sdk/blob/master/.github/CONTRIBUTING.md).\n\n\n[personality_insights]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/personality-insights/\n[concept_expansion]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/glimpseapi/\n[relationship_extraction]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/sireapi/\n[retrieve_and_rank]: http://watson.stage1.mybluemix.net/smarterplanet/us/en/ibmwatson/developercloud/retrieve-rank.html\n[visual_recognition]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/visual-recognition/\n[visual_insights]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/visual-insights/\n\n[tone_analyzer]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/tone-analyzer.html\n[text_to_speech]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/text-to-speech/\n[speech_to_text]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/speech-to-text/\n[concept_insights]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/concept-insights/\n[tradeoff_analytics]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/tradeoff-analytics/\n[language_translation]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/language-translation/\n\n[alchemy_language]: http://www.alchemyapi.com/products/alchemylanguage\n[sentiment_analysis]: http://www.alchemyapi.com/products/alchemylanguage/sentiment-analysis\n[alchemy_vision]: http://www.alchemyapi.com/products/alchemyvision\n[alchemy_data_news]: http://www.alchemyapi.com/products/alchemydata-news\n\n[wdc]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/\n[bluemix]: https://console.ng.bluemix.net\n[npm_link]: https://www.npmjs.com/package/watson-developer-cloud\n[request_github]: https://github.com/request/request\n[examples]: https://github.com/watson-developer-cloud/node-sdk/tree/master/examples\n[document_conversion_integration_example]: https://github.com/watson-developer-cloud/node-sdk/tree/master/examples/document_conversion_integration.v1.js\n[license]: http://www.apache.org/licenses/LICENSE-2.0\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/watson-developer-cloud/node-sdk.git"
  },
  "scripts": {
    "autofix": "eslint . --fix",
    "codecov": "istanbul cover ./node_modules/.bin/mocha -- --ui mocha-retry && codecov",
    "doc": "jsdoc -c jsdoc/config.json",
    "lint": "eslint .",
    "prepare": "npm test && npm version patch",
    "test": "npm run lint && npm run codecov",
    "watch-doc": "nodemon --watch lib/ --watch services/ --watch jsdoc/ --watch package.json --ext js,tmpl --exec npm run doc"
  },
  "version": "1.4.1"
}
